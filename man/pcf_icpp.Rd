% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pcf_icpp.R
\name{pcf_icpp}
\alias{pcf_icpp}
\title{PCF for iterated cluster point process}
\usage{
pcf_icpp(n, init_int, clsiz, c = 1, sd, initial = "Pois",
  kernel_sd_det_init = NULL, kernel_sd_per_init = NULL,
  weight_det_init = 1, weight_per_init = 1/2, noise = "non",
  noise_int = 0, kernel_sd_det_noise = NULL,
  kernel_sd_per_noise = NULL, weight_det_noise = 1,
  weight_per_noise = 1/2)
}
\arguments{
\item{n}{Positive integer. The number of iterations.}

\item{init_int}{Non-negative numeric. Intensity of the initial generation.}

\item{clsiz}{Non-negative numeric. The expected cluster size.}

\item{c}{Numeric. Constant related to the over-/underdispersion of number of point in a cluster.
Default is 1, corresponding to the number of points in a cluster follow a poisson distriution.
See article on iterated cluster point processes.}

\item{sd}{Non-negative number. Offspring density standard deviation.}

\item{initial}{Vector of strings or a single string. Decribing the type of the initial process.
Can be either "Pois" (default), "det", or "per".}

\item{kernel_sd_det_init}{Non-negative numeric. Kernel standard deviation.
(interaction 'radius' for the initial process).
Ignored if \code{initial} is "Pois".}

\item{kernel_sd_per_init}{Non-negative numeric.
Kernel standard deviation. (interaction 'radius' for the initial process).
Ignored if \code{initial} is "Pois".}

\item{weight_det_init}{A positive integer. The alpha weight for an alpha weighted DPP.
Default is 1 corresponding to the DPP (most repulsive gaussian DPP).
Ignored if \code{initial} is "Pois".}

\item{weight_per_init}{A positive half integer. The alpha weight for an alpha weighted PPP.
Default is 1/2 corresponding to the most clustered gaussian PPP which is a Cox process..
Ignored if \code{initial} is "Pois".}

\item{noise}{Vector of strings or a single string. Decribing the type of the noise process.
Can be either "non" (default) "det", "pois", or "per".}

\item{noise_int}{Non-negative numeric or the string \code{"sr"}.
If \code{"sr"} same reproduction system is assumed and \code{noise_int = init_int * (1 - clsiz)}.
Ignored if \code{noise} is "non".}

\item{kernel_sd_det_noise}{Ignored if \code{noise} is "non" or Pois".}

\item{kernel_sd_per_noise}{Ignored if \code{noise} is "non" or Pois".}

\item{weight_det_noise}{A positive integer. The alpha weight for an alpha weighted DPP.
Default is 1 corresponding to the DPP (most repulsive gaussian DPP).
Ignored if \code{noise} is "non" or Pois".}

\item{weight_per_noise}{A positive half integer. The alpha weight for an alpha weighted PPP.
Default is 1/2 corresponding to the most clustered gaussian PPP which is a Cox process.
Ignored if \code{noise} is "non" or Pois".}
}
\value{
A function that takes inter-point distance (commonly referred to as r) as the only argument.
}
\description{
Closure function (ie. returns a function) that:
Calculats the pcf for the n'th generation iterated Neyman-Scott type process with or without noise.
It is asusmed that nothing except for the intensity depends on the generation number.
The offspring density is assumed to be Gaussian.
The retention probability in 0, meaning that points do not survive to the next generation.
}
\details{
The function is a closure function.
The benefit of making a closure function here is that I can run the output function multiple times
without running initial checks and preliminary calculations.
We want this here because we have to compile the code for maybe 1000 values of r.

The initial processes and noise processes may be either Poisson, weighted determinantal or weighted permanetal point process.
}
